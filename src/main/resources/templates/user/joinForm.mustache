{{> /layout/header}}
<div class="container p-5">
    <!-- 요청을 하면 localhost:8080/join POST로 요청됨
    username=사용자입력값&password=사용자값&email=사용자입력값 -->
    <div class="card">
        <div class="card-header"><b>회원가입을 해주세요</b></div>
        <div class="card-body">
            <!-- onsubmit="return valid()" : 회원가입 button -> submit 하기전에 valid()를 무조건 실행하고 실행한다 -->
            <form action="/join" method="POST" enctype="application/x-www-form-urlencoded" onsubmit="return valid()">
                <div class="mb-3">
                    <input type="text" id="username" class="form-control" placeholder="Enter username" name="username"
                        required maxlength="20" onchange="usernameChange()">
                    <!-- submit처럼 작동하지 말라고 type="button" -->
                    <button type="button" onclick="check()">중복체크</button>
                </div>
                <div class="mb-3">
                    <input type="password" class="form-control" placeholder="Enter password" name="password" required
                        maxlength="20">
                </div>
                <div class="mb-3">
                    <input type="email" class="form-control" placeholder="Enter email" name="email" required
                        maxlength="20">
                </div>
                <button id="btnJoin" type="submit" class="btn btn-primary form-control">회원가입</button>
            </form>
        </div>
    </div>
</div>
<script>
    // 전역변수
    let usernameSameCheck = false;

    function usernameChange() {
        console.log("변경됨");
        usernameSameCheck = false;
    }
    function valid() {
        if (usernameSameCheck) {
            return true;
        } else {
            alert("유저네임 중복체크를 해주세요");
            return false;
        }
    }
    // 책임 : input태그로부터 username을 가져와서 통신을 요청하고, 중복이 되었는지 확인한다.
    // async : await를 사용하려면 function앞에 꼭 붙여야 하는 문법!
    async function check() {
        // 1. DOM으로 부터 값 가져오기
        let username = document.querySelector("#username").value;
        //console.log("유저네임", username);

        // 2. 통신하기
        // ``사용해서 ${username}을 받는다
        // await : 이벤트 루프에 등록된 fetch를 기다렸다가 response에 들어가
        let response = await fetch(`/check?username=${username}`);

        // 3. 파싱하기
        // UserController에서 public ResponseEntity<String> -> String을 리턴하기 때문에 response.text()를 파싱한다
        let responseBody = await response.text(); // response.json();
        console.log(responseBody);
        // 스프링부트 응답의 기본 전략은 오브젝트를 리턴하면 json으로 파싱해준다 -> reponse.json();

        // 4. 상태코드 확인
        // 5. 비지니스 로직
        let btnJoin = document.querySelector("#btnJoin");
        if (response.status == 200) {
            alert(responseBody);
            usernameSameCheck = true;
        } else {
            alert(responseBody);
            usernameSameCheck = false;
        }
    }
</script>
{{> /layout/footer}}